#!/usr/sbin/setkey -f

flush;
spdflush;

# MANUAL KEYING IPSEC CONFIGURATION

{#
enc() and auth() are where the shared keys are generated for each host pair. Key lengths in truncate() *must* be adjusted for the selected algorithm,
if changed. Here they are 32 bytes for AES-CBC (128 bit) and 64 bytes for HMAC-SHA256 (256 bit). The SPI are publicly visible identifiers and they
are 6 bytes long. The keys are generated by concatentating sorted host names with ipsec_secret, adding key-specific string, adding template run date
and hashing with SHA256. This guarantees unique keys for each host pair, transform type (encryption, authentication) as well as Ansible run. The latter
is important with static keying as they keys will only have chance to be renewed on each Ansible run.
#}

{% set cipher="aes-cbc" %}
{% set mac="hmac-sha256" %}

{% macro enc(host1, host2) %}  0x{{ ( template_run_date , host1 , host2 , ipsec_secret , "ESP KEY" )  | sort | hash('sha256') | truncate(32,end='')  }} {% endmacro %}
{% macro auth(host1, host2) %} 0x{{ ( template_run_date , host1 , host2 , ipsec_secret , "MAC KEY" )  | sort | hash('sha256') | truncate(64,end='')  }} {% endmacro %}
{% macro spi(host1, host2) %}  0x{{ ( template_run_date , host1 , host2 , ipsec_secret , "SPI" )      | sort | hash('sha256') | truncate(6,end='')  }} {% endmacro %}
{% macro comp(host1, host2) %} 0x{{ ( template_run_date , host1 , host2 , ipsec_secret , "IPCOMP" )   | sort | hash('sha256') | truncate(6,end='')  }} {% endmacro %}

{% for hostname in group['all'] %}
{% if hostname != inventory_hostname %}
{% set local=hostvars[inventory_hostname]['ansible_default_ipv4']['address'] %}
{% set remote=hostvars[hostname]['ip']['ansible_default_ipv4']['address'] %}
### BEGIN ESP {{inventory_hostname}} {{local}} <-> {{hostname}} {{remote}}
{% if ipsec_mode == 'setkey' %}
add {{local}} {{remote}} esp {{ spi(local,remote) }} -E {{cipher}} {{ enc(local,remote) }} -A {{mac}} {{ auth(local, remote) }} ;
add {{remote}} {{local}} esp {{ spi(remote,local) }} -E {{cipher}} {{ enc(remote, local) }} -A {{mac}} {{ auth(remote, local) }} ;
add {{local}} {{remote}} ipcomp {{ comp(local, remote) }} -C deflate;
add {{remote}} {{local}} ipcomp {{ comp(remote, local) }} -C deflate;
{% endif %}
{% if ipsec_open_icmp %}
spdadd {{local}} {{remote}} icmp -P out none;
spdadd {{remote}} {{local}} icmp -P in none;
{% endif %}
{% if ipsec_open_ssh %}
spdadd {{local}}/32[any] {{remote}}/32[ssh] tcp -P out none;
spdadd {{remote}}/32[ssh] {{local}}/32[any] tcp -P in none;
spdadd {{local}}/32[ssh] {{remote}}/32[any] tcp -P out none;
spdadd {{remote}}/32[any] {{local}}/32[ssh] tcp -P in none;
{% endif %}
spdadd {{local}}/32 {{remote}}/32 any -P out ipsec ipcomp/transport//use esp/transport//{{ipsec_policy}};
spdadd {{remote}}/32 {{local}}/32 any -P in ipsec ipcomp/transport//use esp/transport//{{ipsec_policy}};
### END ESP {{inventory_hostname}} {{local}} <-> {{hostname}} {{remote}}
{% endif %}
{% endfor %}
